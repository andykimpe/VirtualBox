VBoxGuestR3LibRuntimeXF86.cpp:
Inspired from http://opensource.apple.com/source/X11server/X11server-85/kdrive/xorg-server-1.6.0/hw/xfree86/dummylib/
xalloc.c and verrorf.c
Author: SÃ©rgio Basto <sergio@serjux.com>

--- ./src/VBox/Additions/common/VBoxGuestLib/Makefile.kmk.xorg17	2012-08-03 13:28:42.000000000 +0100
+++ ./src/VBox/Additions/common/VBoxGuestLib/Makefile.kmk	2012-09-09 01:05:45.271905105 +0100
@@ -187,11 +187,9 @@ VBoxGuestR3LibXFree86_SOURCES  = \
 	VBoxGuestR3LibVideo.cpp \
 	VBoxGuestR3LibRuntimeXF86.cpp
 VBoxGuestR3LibXFree86_INCS     = \
-        $(VBOX_PATH_X11_XFREE_4_3)/programs/Xserver/hw/xfree86/common/ \
-        $(VBOX_PATH_X11_XFREE_4_3)/programs/Xserver/hw/xfree86/os-support \
-        $(VBOX_PATH_X11_XFREE_4_3)/programs/Xserver/include \
-        $(VBOX_PATH_X11_XFREE_4_3)/include \
-        $(VBOX_PATH_X11_XFREE_4_3)/exports/include/X11
+        /usr/share/xorg-x11-server-source/hw/xfree86/common/ \
+		/usr/share/xorg-x11-server-source/hw/xfree86/os-support \
+		/usr/share/xorg-x11-server-source/include 
 
 VBoxGuestR3LibRuntimeXF86.cpp_CXXFLAGS = -Wno-shadow
 
--- ./src/VBox/Additions/common/VBoxGuestLib/VBoxGuestR3LibRuntimeXF86.cpp.xorg17	2011-01-14 20:15:34.000000000 +0000
+++ ./src/VBox/Additions/common/VBoxGuestLib/VBoxGuestR3LibRuntimeXF86.cpp	2012-09-09 01:04:03.198818717 +0100
@@ -34,20 +34,55 @@
 #include <iprt/log.h>
 #include <iprt/mem.h>
 #include <iprt/string.h>
+#include <string.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <math.h>
+#include <ctype.h>
 extern "C" {
 # define XFree86LOADER
-# include <xf86_ansic.h>
 # include <errno.h>
 # undef size_t
 }
 
+/** Provide an VErrorF function when used stand-alone. */
+void VErrorF(const char *format, va_list args)
+{
+    vfprintf(stderr, format, args); /* RATS: We assume the format string
+                                     * is trusted, since it is always
+                                     * from a log message in our code. */
+}
+
+/* When using this file as part of a stand-alone (i.e., non-X-Server
+ * program, then the ultimate output routines have to be defined.  */
+
+/** Provide an ErrorF function when used stand-alone. */
+void ErrorF(const char *format, ...)
+{
+    va_list args;
+
+    va_start(args, format);
+    vfprintf(stderr, format, args); /* RATS: We assume the format string
+                                     * is trusted, since it is always
+                                     * from a log message in our code. */
+    va_end(args);
+}
+
+void *xalloc(unsigned long n)
+{
+    if (!n)
+    n = 1;
+    return malloc(n);
+}
+
 /* This is risky as it restricts call to the ANSI format type specifiers. */
 RTDECL(size_t) RTStrPrintf(char *pszBuffer, size_t cchBuffer, const char *pszFormat, ...)
 {
     va_list args;
     int cbRet;
     va_start(args, pszFormat);
-    cbRet = xf86vsnprintf(pszBuffer, cchBuffer, pszFormat, args);
+    cbRet = vsnprintf(pszBuffer, cchBuffer, pszFormat, args);
     va_end(args);
     return cbRet >= 0 ? cbRet : 0;
 }
@@ -55,8 +90,8 @@ RTDECL(size_t) RTStrPrintf(char *pszBuff
 RTDECL(int) RTStrToUInt32Ex(const char *pszValue, char **ppszNext, unsigned uBase, uint32_t *pu32)
 {
     char *pszNext = NULL;
-    xf86errno = 0;
-    unsigned long ul = xf86strtoul(pszValue, &pszNext, uBase);
+    errno = 0;
+    unsigned long ul = strtoul(pszValue, &pszNext, uBase);
     if (ppszNext)
         *ppszNext = pszNext;
     if (RT_UNLIKELY(pszValue == pszNext))
@@ -65,11 +100,11 @@ RTDECL(int) RTStrToUInt32Ex(const char *
         ul = UINT32_MAX;
     if (pu32)
         *pu32 = (uint32_t) ul;
-    if (RT_UNLIKELY(xf86errno == EINVAL))
+    if (RT_UNLIKELY(errno == EINVAL))
         return VERR_INVALID_PARAMETER;
-    if (RT_UNLIKELY(xf86errno == ERANGE))
+    if (RT_UNLIKELY(errno == ERANGE))
         return VWRN_NUMBER_TOO_BIG;
-    if (RT_UNLIKELY(xf86errno))
+    if (RT_UNLIKELY(errno))
         /* RTErrConvertFromErrno() is not available */
         return VERR_UNRESOLVED_ERROR;
     if (RT_UNLIKELY(*pszValue == '-'))
@@ -77,7 +112,7 @@ RTDECL(int) RTStrToUInt32Ex(const char *
     if (RT_UNLIKELY(*pszNext))
     {
         while (*pszNext)
-            if (!xf86isspace(*pszNext))
+            if (!isspace(*pszNext))
                 return VWRN_TRAILING_CHARS;
         return VWRN_TRAILING_SPACES;
     }
@@ -135,6 +170,6 @@ RTDECL(void *)  RTMemTmpAllocTag(size_t
 
 RTDECL(void)    RTMemTmpFree(void *pv)
 {
-    xfree(pv);
+    free(pv);
 }
 
