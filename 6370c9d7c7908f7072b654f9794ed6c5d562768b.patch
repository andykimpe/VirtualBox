From 6370c9d7c7908f7072b654f9794ed6c5d562768b Mon Sep 17 00:00:00 2001
From: vboxsync <vboxsync@cfe28804-0f27-0410-a406-dd0f0b0b656f>
Date: Wed, 29 Jul 2020 10:03:29 +0000
Subject: [PATCH] IPRT/alloc-r0drv-linux.c,SUPDrv-linux.c: RTMEMALLOC_EXEC_HEAP
 for 5.8+ (more on this later as it doesn't really work).  bugref:9801

git-svn-id: http://www.virtualbox.org/svn/vbox@85505 cfe28804-0f27-0410-a406-dd0f0b0b656f
---
 trunk/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c | 4 ++--
 trunk/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c  | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/trunk/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c b/trunk/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
index 16f6e9fc9e..efe873a184 100644
--- a/trunk/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
+++ b/trunk/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
@@ -144,9 +144,9 @@ static int force_async_tsc = 0;
  * Memory for the executable memory heap (in IPRT).
  */
 # ifdef DEBUG
-#  define EXEC_MEMORY_SIZE   8388608    /* 8 MB */
+#  define EXEC_MEMORY_SIZE   10485760   /* 10 MB */
 # else
-#  define EXEC_MEMORY_SIZE   2097152    /* 2 MB */
+#  define EXEC_MEMORY_SIZE   8388608    /* 8 MB */
 # endif
 extern uint8_t g_abExecMemory[EXEC_MEMORY_SIZE];
 # ifndef VBOX_WITH_TEXT_MODMEM_HACK
diff --git a/trunk/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c b/trunk/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c
index dcda77d276..b182404cec 100644
--- a/trunk/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c
+++ b/trunk/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c
@@ -38,7 +38,7 @@
 
 
 #if (defined(RT_ARCH_AMD64) || defined(DOXYGEN_RUNNING)) && !defined(RTMEMALLOC_EXEC_HEAP)
-# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 23)
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 23) && LINUX_VERSION_CODE < KERNEL_VERSION(5, 8, 0)
 /**
  * Starting with 2.6.23 we can use __get_vm_area and map_vm_area to allocate
  * memory in the moduel range.  This is preferrable to the exec heap below.
