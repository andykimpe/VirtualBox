X.org 1.13 patch 
--- a/src/VBox/Additions/x11/vboxvideo/vboxvideo.c.orig	2012-09-02 05:45:06.134994216 +0100
+++ b/src/VBox/Additions/x11/vboxvideo/vboxvideo.c	2012-09-02 05:45:20.136137244 +0100
@@ -709,7 +709,7 @@ vboxEnableDisableFBAccess(int scrnIndex,
     TRACE_LOG("enable=%s\n", enable ? "TRUE" : "FALSE");
     VBOXSetRec(pScrn);
     pVBox->accessEnabled = enable;
-    pVBox->EnableDisableFBAccess(scrnIndex, enable);
+    pVBox->EnableDisableFBAccess(pScrn, enable);
     TRACE_EXIT();
 }
 
@@ -1198,7 +1198,7 @@ VBOXCloseScreen(int scrnIndex, ScreenPtr
     /* Remove our observer functions from the X server call chains. */
     pScrn->EnableDisableFBAccess = pVBox->EnableDisableFBAccess;
     pScreen->CloseScreen = pVBox->CloseScreen;
-    return pScreen->CloseScreen(scrnIndex, pScreen);
+    return pScreen->CloseScreen(pScreen);
 }
 
 static Bool
@@ -1214,7 +1214,7 @@ VBOXSwitchMode(int scrnIndex, DisplayMod
     /* We want to disable access to the framebuffer before switching mode.
      * After doing the switch, we allow access if it was allowed before. */
     if (pVBox->accessEnabled)
-        pVBox->EnableDisableFBAccess(scrnIndex, FALSE);
+        pVBox->EnableDisableFBAccess(pScrn, FALSE);
 #ifdef VBOXVIDEO_13
     rc = xf86SetSingleMode(pScrn, pMode, 0);
 #else
@@ -1231,7 +1231,7 @@ VBOXSwitchMode(int scrnIndex, DisplayMod
                           pScrn->bitsPerPixel);
 #endif
     if (pVBox->accessEnabled)
-        pVBox->EnableDisableFBAccess(scrnIndex, TRUE);
+        pVBox->EnableDisableFBAccess(pScrn, TRUE);
     TRACE_LOG("returning %s\n", rc ? "TRUE" : "FALSE");
     return rc;
 }
--- a/Config.kmk.x113 2012-09-02 17:55:59.642186269 +0100
+++ b/Config.kmk  2012-09-02 18:30:18.743236550 +0100
@@ -546,9 +546,9 @@ VBOX_WITH_MULTIVERSION_PYTHON ?= 1
 # Enable the kchmviewer.
 VBOX_WITH_KCHMVIEWER = 1
 # Build the testsuite.
-VBOX_WITH_TESTSUITE = 1
+VBOX_WITH_TESTSUITE = 0
 # Build the testcases.
-VBOX_WITH_TESTCASES = 1
+VBOX_WITH_TESTCASES = 0
 # Enables the ffmpeg module for recording test runs.
 # TODO: Enable this for normal build server builds?
 #if1of ($(KBUILD_TARGET), linux)
@@ -4977,30 +4977,30 @@ endif
 # Guest additions libraries (all static).
 #   The _MINI and _SHARED are both compiled as PIC and intended for linking into a .so/.dll/.dylib.
 #
-VBOX_LIB_IPRT_GUEST_R3           = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3$(VBOX_SUFF_LIB)
-VBOX_LIB_IPRT_GUEST_R3_MINI      = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Mini$(VBOX_SUFF_LIB)
-VBOX_LIB_IPRT_GUEST_R3_SHARED    = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Shared$(VBOX_SUFF_LIB)
-VBOX_LIB_IPRT_GUEST_R0           = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR0$(VBOX_SUFF_LIB)
+VBOX_LIB_IPRT_GUEST_R3           = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3$(VBOX_SUFF_LIB)
+VBOX_LIB_IPRT_GUEST_R3_MINI      = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Mini$(VBOX_SUFF_LIB)
+VBOX_LIB_IPRT_GUEST_R3_SHARED    = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Shared$(VBOX_SUFF_LIB)
+VBOX_LIB_IPRT_GUEST_R0           = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR0$(VBOX_SUFF_DLL)
 ifeq ($(KBUILD_TARGET_ARCH),x86)
- VBOX_LIB_IPRT_GUEST_R0_NT4      = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR0NT4$(VBOX_SUFF_LIB)
+ VBOX_LIB_IPRT_GUEST_R0_NT4      = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR0NT4$(VBOX_SUFF_DLL)
 else
  VBOX_LIB_IPRT_GUEST_R0_NT4      = $(VBOX_LIB_IPRT_GUEST_R0)
 endif
-VBOX_LIB_VBGL_R3                 = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3Lib$(VBOX_SUFF_LIB)
-VBOX_LIB_VBGL_R3_XFREE86         = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3LibXFree86$(VBOX_SUFF_LIB)
-VBOX_LIB_VBGL_R3_SHARED          = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3LibShared$(VBOX_SUFF_LIB)
-VBOX_LIB_VBGL_R0BASE             = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR0LibBase$(VBOX_SUFF_LIB)
-VBOX_LIB_VBGL_R0                 = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR0Lib$(VBOX_SUFF_LIB)
+VBOX_LIB_VBGL_R3                 = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3Lib$(VBOX_SUFF_LIB)
+VBOX_LIB_VBGL_R3_XFREE86         = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3LibXFree86$(VBOX_SUFF_DLL)
+VBOX_LIB_VBGL_R3_SHARED          = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3LibShared$(VBOX_SUFF_LIB)
+VBOX_LIB_VBGL_R0BASE             = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR0LibBase$(VBOX_SUFF_DLL)
+VBOX_LIB_VBGL_R0                 = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR0Lib$(VBOX_SUFF_DLL)
 ifeq ($(KBUILD_TARGET),x86)
  VBOX_LIB_IPRT_GUEST_R3_X86      = $(VBOX_LIB_IPRT_GUEST_R3)
  VBOX_LIB_IPRT_GUEST_R3_SHARED_X86 = $(VBOX_LIB_IPRT_GUEST_R3_SHARED)
  VBOX_LIB_VBGL_R3_X86            = $(VBOX_LIB_VBGL_R3)
  VBOX_LIB_VBGL_R3_SHARED_X86     = $(VBOX_LIB_VBGL_R3_SHARED)
 else
- VBOX_LIB_IPRT_GUEST_R3_X86      = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3-x86$(VBOX_SUFF_LIB)
- VBOX_LIB_IPRT_GUEST_R3_SHARED_X86 = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Shared-x86$(VBOX_SUFF_LIB)
- VBOX_LIB_VBGL_R3_X86            = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3Lib-x86$(VBOX_SUFF_LIB)
- VBOX_LIB_VBGL_R3_SHARED_X86     = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3LibShared-x86$(VBOX_SUFF_LIB)
+ VBOX_LIB_IPRT_GUEST_R3_X86      = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3-x86$(VBOX_SUFF_DLL)
+ VBOX_LIB_IPRT_GUEST_R3_SHARED_X86 = $(VBOX_PATH_ADDITIONS_LIB)/RuntimeGuestR3Shared-x86$(VBOX_SUFF_DLL)
+ VBOX_LIB_VBGL_R3_X86            = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3Lib-x86$(VBOX_SUFF_DLL)
+ VBOX_LIB_VBGL_R3_SHARED_X86     = $(VBOX_PATH_ADDITIONS_LIB)/VBoxGuestR3LibShared-x86$(VBOX_SUFF_DLL)
 endif
 
 
--- VirtualBox-4.2.0_RC3/src/VBox/HostServices/SharedFolders/testcase/Makefile.kmk.orig	2012-09-02 18:32:05.119324113 +0100
+++ VirtualBox-4.2.0_RC3/src/VBox/HostServices/SharedFolders/testcase/Makefile.kmk	2012-05-30 11:38:10.000000000 +0100
@@ -21,7 +21,9 @@ include $(KBUILD_PATH)/subheader.kmk
 #
 # Structure size testcase.
 #
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 PROGRAMS += tstShflSizes
+endif
 TESTING  += $(tstShflSizes_0_OUTDIR)/tstShflSizes.run
 ifndef VBOX_ONLY_SDK
  ifeq ($(KBUILD_TARGET),$(KBUILD_HOST))
@@ -44,7 +46,9 @@ ifdef VBOX_WITH_TESTCASES
 #
 # Case conversion testcase.
 #
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 PROGRAMS += tstShflCase
+endif
 tstShflCase_TEMPLATE = VBOXR3TSTEXE
 tstShflCase_DEFS     = VBOX_WITH_HGCM
 tstShflCase_SOURCES  = tstShflCase.cpp
@@ -56,9 +60,11 @@ tstShflCase_LIBS     = $(LIB_RUNTIME)
 
 # As there are differences between the Windows build of the service and others,
 # we do an additional build with RT_OS_WINDOWS defined on non-Windows targets.
+ifneq ($(KBUILD_HOST_ARCH),amd64)
 PROGRAMS += \
     tstSharedFolderService \
     $(if $(eq $(KBUILD_TARGET),win),,tstSharedFolderService-win)
+endif
 
 tstSharedFolderService_TEMPLATE = VBOXR3TSTEXE
 tstSharedFolderService_DEFS     = VBOX_WITH_HGCM UNITTEST
--- a/src/VBox/Main/Makefile.kmk	2012-08-29 15:13:36.000000000 +0100
+++ b/src/VBox/Main/Makefile.kmk	2012-09-02 19:09:49.250454117 +0100
@@ -705,7 +705,7 @@ $$(VBoxC_0_OUTDIR)/VBoxC.rgs: $(VBOX_PAT
 # VBoxCOM - COM Abstraction Layer library
 #
 LIBRARIES += VBoxCOM
-VBoxCOM_TEMPLATE        = VBOXMAINLIB
+VBoxCOM_TEMPLATE        = VBOXMAINDLL
 VBoxCOM_INTERMEDIATES   = $(VBOX_MAIN_PREREQS)
 VBoxCOM_SOURCES         = \
 	glue/com.cpp \
--- a/src/VBox/Runtime/Makefile.kmk.testmangle	2012-08-29 15:13:34.000000000 +0100
+++ b/src/VBox/Runtime/Makefile.kmk	2012-09-02 19:30:41.688859884 +0100
@@ -211,7 +211,7 @@ endif
 #
 # RuntimeR3 - Static Runtime for Ring-3 executables.
 #
-RuntimeR3_TEMPLATE      = VBoxR3Static
+RuntimeR3_TEMPLATE      = VBOXR3DLLNOXCPT
 RuntimeR3_SDKS          = VBOX_LIBXML2 VBOX_OPENSSL VBOX_BOOST ## @todo why is BOOST and XML2 here? r3/xml.cpp is not in this lib...
 RuntimeR3_SDKS.win      = $(VBOX_WINPSDK) $(VBOX_WINDDK)
 RuntimeR3_DEFS          = IN_RT_R3 IN_SUP_R3 LDR_WITH_NATIVE LDR_WITH_ELF32 LDR_WITH_PE RT_WITH_VBOX RT_NO_GIP
