X.org 1.13 patch , not in use, just stay for references.
Reference: 
http://www.mail-archive.com/xorg-devel@lists.x.org/msg30282.html
 [PATCH 01/19] xserver: remove index from CloseScreen (API/ABI breakage) Dave Airlie
 [PATCH 02/19] xserver: convert block/wakeup handlers to passing ScreenPtr (ABI/API break) Dave
 Airlie
 [PATCH 04/19] xf86: modify FreeScreen callback to take pScrn instead of index. (ABI/API) Dave
     Airlie
 [PATCH 03/19] xf86: change EnterVT/LeaveVT to take a ScrnInfoPtr (ABI/API break) Dave Airlie
 [PATCH 07/19] xf86: migrate ValidMode callback to ScrnInfoPtr (ABI/API) Dave Airlie
 [PATCH 05/19] xf86: move AdjustFrame to passing ScrnInfoPtr (ABI/API) Dave Airlie
 [PATCH 06/19] xf86: migrate SwitchMode to taking ScrnInfoPtr (ABI/API) Dave Airlie
 etc...
--- VirtualBox-4.2.0_RC3/src/VBox/Additions/x11/vboxvideo/vboxvideo_dri.c.x113 	2012-08-29 20:10:30.000000000 +0100
+++ VirtualBox-4.2.0_RC3/src/VBox/Additions/x11/vboxvideo/vboxvideo_dri.c	2012-09-06 23:18:39.671510033 +0100
@@ -156,11 +156,11 @@ VBOXDoBlockHandler(int screenNum, pointe
 }
 #endif
 
-Bool VBOXDRIScreenInit(int scrnIndex, ScreenPtr pScreen, VBOXPtr pVBox)
+Bool VBOXDRIScreenInit(ScreenPtr pScreen, VBOXPtr pVBox)
 {
     DRIInfoPtr pDRIInfo = NULL;
     Bool rc = TRUE;
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+    ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
 
     TRACE_ENTRY();
     pVBox->drmFD = -1;
--- VirtualBox-4.2.0_RC3/src/VBox/Additions/x11/vboxvideo/vboxvideo.h.x113	2012-09-06 23:42:36.010456357 +0100
+++ VirtualBox-4.2.0_RC3/src/VBox/Additions/x11/vboxvideo/vboxvideo.h	2012-09-06 23:42:49.903562273 +0100
@@ -234,7 +234,7 @@ extern void vboxAddModes(ScrnInfoPtr pSc
                          uint32_t cyInit);
 
 /* DRI stuff */
-extern Bool VBOXDRIScreenInit(int scrnIndex, ScreenPtr pScreen, VBOXPtr pVBox);
+extern Bool VBOXDRIScreenInit(ScreenPtr pScreen, VBOXPtr pVBox);
 extern Bool VBOXDRIFinishScreenInit(ScreenPtr pScreen);
 extern void VBOXDRIUpdateStride(ScrnInfoPtr pScrn, VBOXPtr pVBox);
 extern void VBOXDRICloseScreen(ScreenPtr pScreen, VBOXPtr pVBox);
--- VirtualBox-4.2.0_RC3/src/VBox/Additions/x11/vboxvideo/vboxvideo.c.x113	2012-08-29 20:10:30.000000000 +0100
+++ VirtualBox-4.2.0_RC3/src/VBox/Additions/x11/vboxvideo/vboxvideo.c	2012-09-06 23:56:40.481894812 +0100
@@ -108,15 +108,15 @@ static Bool VBOXPciProbe(DriverPtr drv,
      struct pci_device *dev, intptr_t match_data);
 #endif
 static Bool VBOXPreInit(ScrnInfoPtr pScrn, int flags);
-static Bool VBOXScreenInit(int Index, ScreenPtr pScreen, int argc,
+static Bool VBOXScreenInit(ScreenPtr pScrn, int argc,
                            char **argv);
-static Bool VBOXEnterVT(int scrnIndex, int flags);
-static void VBOXLeaveVT(int scrnIndex, int flags);
+static Bool VBOXEnterVT(ScrnInfoPtr pScrn, int flags);
+static void VBOXLeaveVT(ScrnInfoPtr pScrn, int flags);
 static Bool VBOXCloseScreen(int scrnIndex, ScreenPtr pScreen);
 static Bool VBOXSaveScreen(ScreenPtr pScreen, int mode);
-static Bool VBOXSwitchMode(int scrnIndex, DisplayModePtr pMode, int flags);
-static void VBOXAdjustFrame(int scrnIndex, int x, int y, int flags);
-static void VBOXFreeScreen(int scrnIndex, int flags);
+static Bool VBOXSwitchMode(ScrnInfoPtr pScrn, DisplayModePtr pMode, int flags);
+static void VBOXAdjustFrame(ScrnInfoPtr pScrn, int x, int y, int flags);
+static void VBOXFreeScreen(ScrnInfoPtr pScrn, int flags);
 static void VBOXDisplayPowerManagementSet(ScrnInfoPtr pScrn, int mode,
                                           int flags);
 
@@ -700,16 +700,14 @@ VBOXProbe(DriverPtr drv, int flags)
  * restore it or not afterwards.
  */
 static void
-vboxEnableDisableFBAccess(int scrnIndex, Bool enable)
+vboxEnableDisableFBAccess(ScrnInfoPtr pScrn, Bool enable)
 {
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-    
     VBOXPtr pVBox = VBOXGetRec(pScrn);
 
     TRACE_LOG("enable=%s\n", enable ? "TRUE" : "FALSE");
     VBOXSetRec(pScrn);
     pVBox->accessEnabled = enable;
-    pVBox->EnableDisableFBAccess(scrnIndex, enable);
+    pVBox->EnableDisableFBAccess(pScrn, enable);
     TRACE_EXIT();
 }
 
@@ -936,9 +934,9 @@ vboxLoadPalette(ScrnInfoPtr pScrn, int n
  * End QUOTE.
  */
 static Bool
-VBOXScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
+VBOXScreenInit(ScreenPtr pScreen, int argc, char **argv)
 {
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+    ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
     VBOXPtr pVBox = VBOXGetRec(pScrn);
     VisualPtr visual;
     unsigned flags;
@@ -960,7 +958,7 @@ VBOXScreenInit(int scrnIndex, ScreenPtr
         return (FALSE);
 
 #ifdef VBOX_DRI
-    pVBox->useDRI = VBOXDRIScreenInit(scrnIndex, pScreen, pVBox);
+    pVBox->useDRI = VBOXDRIScreenInit(pScreen, pVBox);
 #endif
 
     if (!fbScreenInit(pScreen, pVBox->base,
@@ -1113,7 +1111,7 @@ VBOXScreenInit(int scrnIndex, ScreenPtr
         xf86ShowUnusedOptions(pScrn->scrnIndex, pScrn->options);
 
     if (vbox_cursor_init(pScreen) != TRUE)
-        xf86DrvMsg(scrnIndex, X_ERROR,
+        xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
                    "Unable to start the VirtualBox mouse pointer integration with the host system.\n");
 
 #ifdef VBOX_DRI
@@ -1124,9 +1122,8 @@ VBOXScreenInit(int scrnIndex, ScreenPtr
 }
 
 static Bool
-VBOXEnterVT(int scrnIndex, int flags)
+VBOXEnterVT(ScrnInfoPtr pScrn, int flags)
 {
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
     VBOXPtr pVBox = VBOXGetRec(pScrn);
 
     TRACE_ENTRY();
@@ -1136,7 +1133,7 @@ VBOXEnterVT(int scrnIndex, int flags)
     pVBox->vtSwitch = FALSE;
 #ifdef VBOX_DRI
     if (pVBox->useDRI)
-        DRIUnlock(screenInfo.screens[scrnIndex]);
+        DRIUnlock(xf86ScrnToScreen(pScrn));
 #endif
 #ifdef VBOXVIDEO_13
     if (!xf86SetDesiredModes(pScrn))
@@ -1151,9 +1148,8 @@ VBOXEnterVT(int scrnIndex, int flags)
 }
 
 static void
-VBOXLeaveVT(int scrnIndex, int flags)
+VBOXLeaveVT(ScrnInfoPtr pScrn, int flags)
 {
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
     VBOXPtr pVBox = VBOXGetRec(pScrn);
 
     TRACE_ENTRY();
@@ -1165,7 +1161,7 @@ VBOXLeaveVT(int scrnIndex, int flags)
     vboxDisableGraphicsCap(pVBox);
 #ifdef VBOX_DRI
     if (pVBox->useDRI)
-        DRILock(screenInfo.screens[scrnIndex], 0);
+        DRILock(xf86ScrnToScreen(pScrn), 0);
 #endif
     TRACE_EXIT();
 }
@@ -1198,23 +1194,21 @@ VBOXCloseScreen(int scrnIndex, ScreenPtr
     /* Remove our observer functions from the X server call chains. */
     pScrn->EnableDisableFBAccess = pVBox->EnableDisableFBAccess;
     pScreen->CloseScreen = pVBox->CloseScreen;
-    return pScreen->CloseScreen(scrnIndex, pScreen);
+    return pScreen->CloseScreen(pScreen);
 }
 
 static Bool
-VBOXSwitchMode(int scrnIndex, DisplayModePtr pMode, int flags)
+VBOXSwitchMode(ScrnInfoPtr pScrn, DisplayModePtr pMode, int flags)
 {
-    ScrnInfoPtr pScrn;
     VBOXPtr pVBox;
     Bool rc;
 
     TRACE_LOG("HDisplay=%d, VDisplay=%d\n", pMode->HDisplay, pMode->VDisplay);
-    pScrn = xf86Screens[scrnIndex];  /* Why does X have three ways of referring to the screen? */
     pVBox = VBOXGetRec(pScrn);
     /* We want to disable access to the framebuffer before switching mode.
      * After doing the switch, we allow access if it was allowed before. */
     if (pVBox->accessEnabled)
-        pVBox->EnableDisableFBAccess(scrnIndex, FALSE);
+        pVBox->EnableDisableFBAccess(pScrn, FALSE);
 #ifdef VBOXVIDEO_13
     rc = xf86SetSingleMode(pScrn, pMode, 0);
 #else
@@ -1231,16 +1225,15 @@ VBOXSwitchMode(int scrnIndex, DisplayMod
                           pScrn->bitsPerPixel);
 #endif
     if (pVBox->accessEnabled)
-        pVBox->EnableDisableFBAccess(scrnIndex, TRUE);
+        pVBox->EnableDisableFBAccess(pScrn, TRUE);
     TRACE_LOG("returning %s\n", rc ? "TRUE" : "FALSE");
     return rc;
 }
 
 static void
-VBOXAdjustFrame(int scrnIndex, int x, int y, int flags)
+VBOXAdjustFrame(ScrnInfoPtr pScrn, int x, int y, int flags)
 {
-    VBOXPtr pVBox = VBOXGetRec(xf86Screens[scrnIndex]);
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+    VBOXPtr pVBox = VBOXGetRec(pScrn);
 
     TRACE_ENTRY();
     /* Don't fiddle with the hardware if we are switched
@@ -1251,10 +1244,8 @@ VBOXAdjustFrame(int scrnIndex, int x, in
 }
 
 static void
-VBOXFreeScreen(int scrnIndex, int flags)
+VBOXFreeScreen(ScrnInfoPtr pScrn, int flags)
 {
-    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-
     /* Destroy the VGA hardware record */
     vgaHWFreeHWRec(pScrn);
     /* And our private record */
